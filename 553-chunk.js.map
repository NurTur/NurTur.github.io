{"version":3,"file":"553-chunk.js?t=1658227161832","mappings":"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","sources":["webpack://new_react_lending/./src/core/hooks/createClient/index.js","webpack://new_react_lending/./src/core/hooks/bondAgreementCommon/index.js","webpack://new_react_lending/./src/core/hooks/bondAgreementForm/index.js","webpack://new_react_lending/./src/core/hooks/bondIssueCommon/index.js","webpack://new_react_lending/./src/core/hooks/agencyAgreementsList/index.js","webpack://new_react_lending/./src/views/bondIssueList/index.jsx","webpack://new_react_lending/./src/core/hooks/bondIssueList/index.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { cacheOfDictionaries } from '@/core/services/dictionaries';\r\nimport { validateIIN } from '@/core/utils/validate';\r\nimport request from '@/core/utils/request';\r\nimport handleErrors from '@/core/services/handleErrors';\r\n\r\nconst allClientStates = {};\r\nconst allClientHandlers = {};\r\n\r\nconst usePerformInfoForm = () => {\r\n    const [legalForm, setLegalform] = useState('');\r\n    const [iin, setIin] = useState('');\r\n    const [bin, setBin] = useState('');\r\n    const [gender, setGender] = useState(true);\r\n    const [surname, setSurname] = useState('');\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [adress, setAdress] = useState('');\r\n    const [nameOfCompany, setNameOfCompany] = useState('');\r\n    const [birthDay, setBirthDay] = useState(new Date());\r\n    const [cardInfo, setCardInfo] = useState(null);\r\n    const [clientContrats, setClientContrats] = useState([]);\r\n    const [contractStatus, setContractStatus] = useState(0);\r\n    const [contractClass, setContractClass] = useState(40);\r\n\r\n    const infoStates = {\r\n        nameOfCompany,\r\n        bin,\r\n        cardInfo,\r\n        legalForm,\r\n        listLegalForms: cacheOfDictionaries.get('clientLegalForms') || [],\r\n        iin,\r\n        gender,\r\n        surname,\r\n        firstname,\r\n        lastname,\r\n        adress,\r\n        birthDay,\r\n        clientContrats,\r\n        contractStatus,\r\n        contractClass\r\n    };\r\n\r\n    const infoHandlers = {\r\n        handleContractStatus: (e) => setContractStatus(+e.target.value),\r\n        handleContractClass: (e) => setContractClass(+e.target.value),\r\n        handleIin: (e) => setIin(e.target.value),\r\n        handleBin: (e) => setBin(e.target.value),\r\n        handleBirthDay: (value) => setBirthDay(value),\r\n        handleAdress: (e) => setAdress(e.target.value),\r\n        handleNameOfCompany: (e) => setNameOfCompany(e.target.value),\r\n        handleGender: (e) => setGender(e.target.value),\r\n        handleSurname: (e) => setSurname(e.target.value),\r\n        handleLastname: (e) => setLastname(e.target.value),\r\n        handleLegalform: (e) => setLegalform(e.target.value),\r\n        handleFirstname: (e) => setFirstname(e.target.value),\r\n        handleAllInfo: useCallback((e) => {\r\n            setIin(e.identityNumber || '');\r\n            setBin(e.identityNumber || '');\r\n            setBirthDay(new Date(e.birthDay));\r\n            setAdress(e.clientAddresses?.[0]?.address || '');\r\n            setGender(e.isMale || false);\r\n            setSurname(e.surname || '');\r\n            setLastname(e.patronymic || '');\r\n            setLegalform(e.legalFormId || '');\r\n            setFirstname(e.name || '');\r\n            setClientContrats(e.clientContrats || []);\r\n            setCardInfo(e);\r\n            setNameOfCompany(e.fullName || '');\r\n        }, [])\r\n    };\r\n\r\n    const infoErrors = {\r\n        checkIin: {\r\n            error: !!validateIIN(iin) || iin.length !== 12,\r\n            helperText: validateIIN(iin)\r\n        },\r\n        checkBin: {\r\n            error: bin === '',\r\n            helperText: bin === '' ? '* Введите корректный БИН' : ''\r\n        },\r\n        checkLegalForm: {\r\n            error: legalForm === '',\r\n            helpertext: legalForm === '' ? '* Обязательно выберите правовую форму' : ''\r\n        },\r\n        checkRuString: (value) => ({\r\n            error: String(value).length < 2,\r\n            helperText: String(value).length < 2 ? '* Введите корректные данные' : ''\r\n        })\r\n    };\r\n\r\n    allClientStates.infoStates = infoStates;\r\n    allClientHandlers.infoHandlers = infoHandlers;\r\n\r\n    return [infoStates, infoHandlers, infoErrors];\r\n};\r\n\r\nconst usePerformContactsForm = () => {\r\n    const defaultContact = { id: nanoid(8), isDefault: false, checked: false, typeContact: 'mobile', address: '' };\r\n    const initialBaseContact = [{ ...defaultContact }];\r\n\r\n    const [contactList, setContactList] = useState(initialBaseContact);\r\n    const [selectedRadioButtonIndex, setSelectedRadioButtonIndex] = useState('0');\r\n\r\n    const contactState = {\r\n        contactList,\r\n        selectedRadioButtonIndex\r\n    };\r\n\r\n    const contactHandlers = {\r\n        handleAddContact: () => setContactList([...contactList, defaultContact]),\r\n        handleLegalform: (index, e) => changeListProperty(index, e.target.value, 'typeContact'),\r\n        handleCheckbox: (index, e) => changeListProperty(index, e.target.checked, 'checked'),\r\n        handlePhoneNumber: (index, e) => changeListProperty(index, e.target.value, 'address'),\r\n        handleBasicContact: (index, e) => changeListProperty(index, e.target.checked, 'basicContact'),\r\n        handleRemoveRows: () => {\r\n            const newContactList = contactList.filter((item) => !item.checked);\r\n            setContactList(newContactList);\r\n        },\r\n        controlBasicContact: (index) => ({\r\n            checked: selectedRadioButtonIndex === String(index),\r\n            onChange: (e) => setSelectedRadioButtonIndex(e.target.value),\r\n            value: index,\r\n            name: 'contact-radio-buttons',\r\n            inputProps: { 'aria-label': index }\r\n        }),\r\n        handleAllContacts: (arr = []) => {\r\n            setContactList(\r\n                arr.map((item) => ({\r\n                    id: nanoid(8),\r\n                    isDefault: item.isDefault,\r\n                    checked: false,\r\n                    typeContact: 'mobile',\r\n                    address: item.address\r\n                }))\r\n            );\r\n        }\r\n    };\r\n\r\n    const contactErrors = {\r\n        checkIin: {\r\n            //     error: iin.length === 0,\r\n            //     helperText: iin.length === 0 ? 'Введите корректные данные' : ''\r\n        }\r\n    };\r\n\r\n    function changeListProperty(index, value, property) {\r\n        const newContactList = contactList.slice();\r\n        newContactList[index][property] = value;\r\n        setContactList(newContactList);\r\n    }\r\n\r\n    allClientStates.contactState = contactState;\r\n    allClientHandlers.contactHandlers = contactHandlers;\r\n\r\n    return [contactState, contactHandlers, contactErrors];\r\n};\r\n\r\nconst usePerformRequisitesForm = () => {\r\n    const defaultRequisite = { typeOfProps: '', propsValue: '', bank: '', note: '' };\r\n\r\n    const [requisite, setRequisiteList] = useState(defaultRequisite);\r\n\r\n    const requisiteState = {\r\n        requisite\r\n    };\r\n\r\n    const requisiteHandlers = {\r\n        handleTypeOfProps: (e) => changeListProperty(e.target.value, 'typeOfProps'),\r\n        handleBank: (e) => changeListProperty(e.target.value, 'bank'),\r\n        handlePropsValue: (e) => changeListProperty(e.target.value, 'propsValue'),\r\n        handleNote: (e) => changeListProperty(e.target.value, 'note'),\r\n        handleAllRequisite: (e) => {\r\n            if (e) {\r\n                setRequisiteList({\r\n                    typeOfProps: e.requisiteTypeId || '',\r\n                    propsValue: e.value || '',\r\n                    bank: e.bankId || '',\r\n                    note: e.note || ''\r\n                });\r\n            } else {\r\n                setRequisiteList(defaultRequisite);\r\n            }\r\n        }\r\n    };\r\n\r\n    const requisiteErrors = {\r\n        checkSelect: (text, property) => ({\r\n            error: text === '',\r\n            helpertext: text === '' ? `* Обязательно выберите ${property}` : ''\r\n        }),\r\n        checkInputText: (text) => ({\r\n            error: text === '',\r\n            helperText: text === '' ? '* Введите значение' : ''\r\n        })\r\n    };\r\n\r\n    function changeListProperty(value, property) {\r\n        setRequisiteList({ ...requisite, [property]: value });\r\n    }\r\n\r\n    allClientStates.requisiteState = requisiteState;\r\n    allClientHandlers.requisiteHandlers = requisiteHandlers;\r\n\r\n    return [requisiteState, requisiteHandlers, requisiteErrors];\r\n};\r\n\r\nconst useAllClientCard = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pathname = window.location.pathname;\r\n    const index = pathname.lastIndexOf('/');\r\n    useEffect(() => {\r\n        request.post(`/api/Client/card`, pathname.slice(index + 1)).then(\r\n            (data) => {\r\n                allClientHandlers.infoHandlers.handleAllInfo(data);\r\n                allClientHandlers.contactHandlers.handleAllContacts(data.clientContacts);\r\n                allClientHandlers.requisiteHandlers.handleAllRequisite(data.clientRequisite);\r\n            },\r\n            (errorPromise) => handleErrors(dispatch, errorPromise, 'Ошибка при загрузке клиента')\r\n        );\r\n    }, []);\r\n\r\n    return [allClientStates];\r\n};\r\n\r\nexport { usePerformInfoForm, usePerformContactsForm, usePerformRequisitesForm, useAllClientCard };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getISODate } from '@/core/utils/other';\r\n\r\nconst useBondAgreementCommon = (arr = []) => {\r\n    const { clientList } = useSelector((state) => ({\r\n        clientList: state.lists.clientList.list || []\r\n    }));\r\n    const [inputs, setInputs] = useState({\r\n        parValueOfBond: 0,\r\n        totalNumberOfBonds: 0,\r\n        prepaidInterest: 0,\r\n        couponPaymentAmountPerBond: 0,\r\n        contractNumber: '',\r\n        nominalTotalCost: 0,\r\n        totalCost: 0,\r\n        numberOfBondsForSecondarySale: 0,\r\n        bondSum: 0,\r\n        issueRate: 1,\r\n        discountAmount: 0\r\n    });\r\n    const [selects, setSelects] = useState({ currencyId: '', emissionPeriod: '', couponRateId: '', payTypeId: 1 });\r\n    const [contractPaymentSchedule, setContractPaymentSchedule] = useState([]);\r\n    const [isOpenPaymentSchedule, setIsOpenPaymentSchedule] = useState(false);\r\n    const [isOpenSignModal, setIsOpenSignModal] = useState(false);\r\n    const [loadingButton, setLoadingButton] = useState(false);\r\n    const [reloadPage, setReloadPage] = useState(false);\r\n    const [cardData, setCardData] = useState({});\r\n    const [payType, setPayType] = useState('Iban');\r\n    const [branchId, setBranchId] = useState(3);\r\n    const [isOpenSecondarySaleModal, setIsOpenSecondarySaleModal] = useState(false);\r\n    const [isOpenInterestManagement, setIsOpenInterestManagement] = useState(false);\r\n    const [secondarySaleDate, setSecondarySaleDate] = useState(new Date());\r\n    const [client, setClient] = useState({ obj: {}, info: '' });\r\n    const [changingInterestManagement, setChangingInterestManagement] = useState('InterestAccrual');\r\n    const [changeDate, setChangeDate] = useState(new Date());\r\n    const [isOpenMoveToAnotherBond, setIsOpenMoveToAnotherBond] = useState(false);\r\n    const [status, setStatus] = useState(0);\r\n\r\n    const commonStates = {\r\n        isOpenMoveToAnotherBond,\r\n        changeDate,\r\n        changingInterestManagement,\r\n        isOpenInterestManagement,\r\n        client,\r\n        secondarySaleDate,\r\n        isOpenSecondarySaleModal,\r\n        branchId,\r\n        payType,\r\n        inputs,\r\n        cardData,\r\n        reloadPage,\r\n        isOpenSignModal,\r\n        isOpenPaymentSchedule,\r\n        contractPaymentSchedule,\r\n        loadingButton,\r\n        selects,\r\n        status\r\n    };\r\n\r\n    const commonHandlers = {\r\n        handleChangeDate: (value) => setChangeDate(value),\r\n        handleClient: (e, newValue) => {\r\n            const index = +newValue.slice(0, newValue.indexOf('-')) || 1;\r\n            setClient({ obj: clientList[index - 1], info: newValue });\r\n        },\r\n        handleChangingInterestManagement: (e) => setChangingInterestManagement(e.target.value),\r\n        handleSecondarySaleDate: (value) => setSecondarySaleDate(value),\r\n        handlePayType: (e) => setPayType(e.target.value),\r\n        handleBranchId: (e) => setBranchId(+e.target.value),\r\n        handleIsOpenInterestManagement: () => setIsOpenInterestManagement(!isOpenInterestManagement),\r\n        handleIsOpenSignModal: () => setIsOpenSignModal(!isOpenSignModal),\r\n        handleIsOpenSecondarySaleModal: () => setIsOpenSecondarySaleModal(!isOpenSecondarySaleModal),\r\n        handleIsOpenPaymentSchedule: () => setIsOpenPaymentSchedule(!isOpenPaymentSchedule),\r\n        handleIsOpenMoveToAnotherBond: () => setIsOpenMoveToAnotherBond(!isOpenMoveToAnotherBond),\r\n        handleContractPaymentSchedule: (data) => setContractPaymentSchedule(data || []),\r\n        handleLoadingButton: (bool) => setLoadingButton(bool),\r\n        handleReloadPage: (bool, status = 0) => {\r\n            if (status > 0) {\r\n                setStatus(status);\r\n            }\r\n            setReloadPage(bool);\r\n        },\r\n        handleCardData: (data) => setCardData(data || {}),\r\n        handleText: (e) => setInputs({ ...inputs, [e.target.name]: e.target.value }),\r\n        handleFloat: (e) => {\r\n            const value = String(e.target.value);\r\n            let copyValue = '';\r\n            for (const i of value) {\r\n                if (i in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) copyValue += i;\r\n                else if (i === ',' || i === '.') copyValue += '.';\r\n            }\r\n            if (copyValue[copyValue.length - 1] === '.' && +copyValue >= 0) {\r\n                setInputs({ ...inputs, [e.target.name]: copyValue || 0 });\r\n            } else {\r\n                setInputs({ ...inputs, [e.target.name]: +copyValue || 0 });\r\n            }\r\n        },\r\n        handleSelect: (e) => setSelects({ ...selects, [e.target.name]: e.target.value })\r\n    };\r\n\r\n    const commonErrors = {\r\n        checkInputNumber: (num) => ({\r\n            error: num <= 0,\r\n            helperText: num <= 0 ? '* Введите cумму больше нуля' : ''\r\n        }),\r\n        checkInputText: (text) => ({\r\n            error: text === '',\r\n            helperText: text === '' ? '* Введите значение' : ''\r\n        }),\r\n        checkSelect: (text, property) => ({\r\n            error: text === '',\r\n            helpertext: text === '' ? `* Обязательно выберите ${property}` : ''\r\n        }),\r\n        checkClient: {\r\n            error: client.info === '',\r\n            helperText: client.info === '' ? '* Обязательно выберите клиента' : ''\r\n        }\r\n    };\r\n\r\n    const commonSetStates = {\r\n        setContractPaymentSchedule,\r\n        setInputs,\r\n        setCardData,\r\n        setSelects\r\n    };\r\n\r\n    return [commonStates, commonHandlers, commonErrors, commonSetStates];\r\n};\r\n\r\nexport { useBondAgreementCommon };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport request from '@/core/utils/request';\r\nimport { getISODate } from '@/core/utils/other';\r\nimport handleErrors from '@/core/services/handleErrors';\r\nimport { changeDepositPaymentSchedule } from '@/core/helpers/changeDataStructure';\r\nimport { useBondAgreementCommon } from '@/core/hooks/bondAgreementCommon';\r\nimport { getBondAgreementCard } from '@/core/services/bondActions';\r\nimport { cacheOfDictionaries } from '@/core/services/dictionaries';\r\n\r\nconst useBondAgreementForm = (arr = []) => {\r\n    const dispatch = useDispatch();\r\n    const pathname = window.location.pathname;\r\n    const index = pathname.lastIndexOf('/');\r\n    const bondIssueId = +pathname.slice(index + 1);\r\n\r\n    const { clientList, agencyAgreementList } = useSelector((state) => ({\r\n        clientList: state.lists.clientList.list || [],\r\n        agencyAgreementList: state.lists.agencyAgreementList?.list || []\r\n    }));\r\n\r\n    const [commonStates, commonHandlers, commonErrors, commonSetStates] = useBondAgreementCommon();\r\n\r\n    const [releaseDate, setReleaseDate] = useState(new Date());\r\n    const [maturityDate, setMaturityDate] = useState(new Date());\r\n\r\n    const [emitent, setEmitent] = useState({ obj: {}, info: '' });\r\n    const [agent, setAgent] = useState({ obj: {}, info: '' });\r\n    const [isOpenPaymentSchedule, setIsOpenPaymentSchedule] = useState(false);\r\n    const [isinList, setIsinList] = useState([]);\r\n    const [isin, setIsin] = useState('');\r\n    const [emissionId, setEmissionId] = useState('');\r\n    const [noteSelected, setNoteSelected] = useState([]);\r\n    const [noteList, setNoteList] = useState([]);\r\n    const [accountSelected, setAccountSelected] = useState([]);\r\n    const [bondType, setBondType] = useState('');\r\n\r\n    const bondIssueStates = {\r\n        bondType,\r\n        accountSelected,\r\n        noteSelected,\r\n        noteList,\r\n        emissionId,\r\n        isin,\r\n        isinList,\r\n        isOpenPaymentSchedule,\r\n        agent,\r\n        releaseDate,\r\n        maturityDate,\r\n        emitent\r\n    };\r\n\r\n    const setCalculatedValuesBondAgreement = (data) =>\r\n        unstable_batchedUpdates(() =>\r\n            commonSetStates.setInputs({\r\n                ...commonStates.inputs,\r\n                parValueOfBond: data.nominalCost || 0,\r\n                totalNumberOfBonds: data.quantity || 0,\r\n                prepaidInterest: data.prepaidInterest || 0,\r\n                nominalTotalCost: data.nominalTotalCost || 0,\r\n                totalCost: data.totalCost || 0\r\n            })\r\n        );\r\n\r\n    const setValuesBondAgreement = (data, calculated = false) => {\r\n        const contractRates0 = data.contractRates?.[0] || {};\r\n        const rateObj = cacheOfDictionaries\r\n            .get('contractSettingRates')\r\n            .find((item) => item.rate === contractRates0.rate && item.daysInMonth === contractRates0.daysInMonth);\r\n\r\n        unstable_batchedUpdates(() => {\r\n            commonSetStates.setContractPaymentSchedule(changeDepositPaymentSchedule(data.contractPaymentSchedule || []));\r\n            commonSetStates.setSelects({\r\n                currencyId: data.currencyId,\r\n                emissionPeriod: data.period,\r\n                couponRateId: rateObj?.id || '',\r\n                payTypeId: 1\r\n            });\r\n            setIsin(data.isin || '');\r\n            // setAgent({ obj: {}, info: getAgentInfo(data.agentContractId, data.agentList) });\r\n            setReleaseDate(data.contractDate);\r\n            setMaturityDate(data.maturityDate);\r\n            setNoteList(data.contractNotes);\r\n            setBondType(data.contractTypeCodes || '');\r\n\r\n            if (calculated) {\r\n                commonSetStates.setInputs({\r\n                    parValueOfBond: 0,\r\n                    totalNumberOfBonds: 0,\r\n                    couponPaymentAmountPerBond: 0,\r\n                    contractNumber: '',\r\n                    prepaidInterest: 0,\r\n                    nominalTotalCost: 0,\r\n                    totalCost: 0,\r\n                    numberOfBondsForSecondarySale: 0,\r\n                    bondSum: 0,\r\n                    issueRate: 1,\r\n                    discountAmount: 0\r\n                });\r\n                setEmitent({ obj: {}, info: '' });\r\n\r\n                setEmissionId(data.id || '');\r\n                setReleaseDate(new Date());\r\n            } else {\r\n                if (commonStates.status > 0) {\r\n                    data.status = commonStates.status;\r\n                }\r\n                commonSetStates.setCardData(data || {});\r\n                commonSetStates.setInputs({\r\n                    parValueOfBond: data.nominalCost,\r\n                    totalNumberOfBonds: data.quantity,\r\n                    couponPaymentAmountPerBond: data.couponAmount,\r\n                    contractNumber: data.contractNumber,\r\n                    prepaidInterest: data.prepaidInterest,\r\n                    nominalTotalCost: data.nominalTotalCost,\r\n                    totalCost: data.totalCost,\r\n                    numberOfBondsForSecondarySale: 0,\r\n                    bondSum: 0,\r\n                    issueRate: data.issueRate || 1,\r\n                    discountAmount: +data.discountAmount\r\n                });\r\n                setReleaseDate(data.contractDate);\r\n                setEmitent({ obj: { id: data.clientId || '' }, info: getClientInfo(data.clientId, clientList) });\r\n                setEmissionId(data.emissionId || '');\r\n            }\r\n        });\r\n    };\r\n\r\n    const bondIssueHandlers = {\r\n        handleBondType: (e) => setBondType(e.target.value),\r\n        handleSelectTableRow: (event, id) => setAccountSelected([id]),\r\n        handleReleaseDate: (value) => setReleaseDate(value),\r\n        handleMaturityDate: (value) => setMaturityDate(value),\r\n\r\n        handleIsOpenPaymentSchedule: () => setIsOpenPaymentSchedule(!isOpenPaymentSchedule),\r\n\r\n        handleEmitent: (e, newValue) => {\r\n            const index = +newValue.slice(0, newValue.indexOf('-')) || 1;\r\n            setEmitent({ obj: clientList[index - 1], info: newValue });\r\n        },\r\n        handleAgent: (e, newValue) => {\r\n            const index = +newValue.slice(0, newValue.indexOf('-')) || 1;\r\n            const agenciesList = agencyAgreementList || [];\r\n            setAgent({ obj: agenciesList[index - 1], info: newValue });\r\n        },\r\n        handleIsin: (e) =>\r\n            request.post(`/api/bondEmission/find`, { ISIN: e.target.value }).then(\r\n                (data) => setValuesBondAgreement(data, true),\r\n                (errorPromise) => handleErrors(dispatch, errorPromise, 'ISIN не найден')\r\n            ),\r\n        handleCalculatedIsin: (data) => setCalculatedValuesBondAgreement(data),\r\n        handleNoteSelectAllTableRows: (event) => {},\r\n        handleNoteSelectTableRow: (event, id) => {\r\n            if (id) setNoteSelected([id]);\r\n            else setNoteSelected([]);\r\n        },\r\n        handleNoteUploadList: (arr) => setNoteList(arr)\r\n    };\r\n\r\n    const bondIssueErrors = {\r\n        checkEmitent: {\r\n            error: emitent.info === '',\r\n            helperText: emitent.info === '' ? '* Обязательно выберите клиента' : ''\r\n        },\r\n        checkIsin: (text) => ({\r\n            error: text === '',\r\n            helpertext: text === '' ? `* Обязательно выберите ISIN` : ''\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (commonStates.reloadPage) {\r\n            dispatch(getBondAgreementCard(bondIssueId)).then((data) => setValuesBondAgreement(data));\r\n            commonHandlers.handleReloadPage(false);\r\n        }\r\n    }, [commonStates.reloadPage]);\r\n\r\n    useEffect(() => {\r\n        if (bondIssueId > 0) {\r\n            if (isinList.length === 0) {\r\n                request.post(`/api/dictionary/isinList`, {}).then(\r\n                    (data) => {\r\n                        setIsinList(data);\r\n                        dispatch(getBondAgreementCard(bondIssueId)).then((data) => setValuesBondAgreement(data));\r\n                    },\r\n                    (errorPromise) => handleErrors(dispatch, errorPromise, 'Ошибка при загрузке isinList')\r\n                );\r\n            } else {\r\n                dispatch(getBondAgreementCard(bondIssueId)).then((data) => setValuesBondAgreement(data));\r\n            }\r\n        } else {\r\n            request.post(`/api/dictionary/isinList`, {}).then(\r\n                (data) => setIsinList(data),\r\n                (errorPromise) => handleErrors(dispatch, errorPromise, 'Ошибка при загрузке isinList')\r\n            );\r\n        }\r\n    }, [bondIssueId]);\r\n\r\n    function getClientInfo(clientId, clientList) {\r\n        const clientData = clientList.find((item) => item.id === clientId);\r\n        if (clientData) {\r\n            return `${clientData.identityNumber || ''}, ${clientData.fullName || ''}`;\r\n        }\r\n        return '---';\r\n    }\r\n\r\n    function getAgentInfo(agentContractId, agentList) {\r\n        const agentData = agentList?.find((item) => item.id === agentContractId);\r\n        if (agentData) {\r\n            return `${agentData.identityNumber}, ${agentData.fullName || ''},  № контракта ${agentData.contractNumber}`;\r\n        }\r\n        return '---';\r\n    }\r\n\r\n    return [\r\n        { ...commonStates, ...bondIssueStates },\r\n        { ...commonHandlers, ...bondIssueHandlers },\r\n        { ...commonErrors, ...bondIssueErrors }\r\n    ];\r\n};\r\n\r\nexport { useBondAgreementForm };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getISODate } from '@/core/utils/other';\r\n\r\nconst useBondIssueCommon = (arr = []) => {\r\n    const [inputs, setInputs] = useState({ isin: '', parValueOfBond: 0, totalNumberOfBonds: 0, couponPaymentAmountPerBond: 0 });\r\n    const [selects, setSelects] = useState({ currencyId: '', emissionPeriod: '', couponRateId: '' });\r\n    const [contractPaymentSchedule, setContractPaymentSchedule] = useState([]);\r\n    const [isOpenPaymentSchedule, setIsOpenPaymentSchedule] = useState(false);\r\n    const [loadingButton, setLoadingButton] = useState(false);\r\n    const [reloadPage, setReloadPage] = useState(false);\r\n    const [cardData, setCardData] = useState({});\r\n\r\n    const commonStates = {\r\n        inputs,\r\n        cardData,\r\n        reloadPage,\r\n        isOpenPaymentSchedule,\r\n        contractPaymentSchedule,\r\n        loadingButton,\r\n        selects\r\n    };\r\n\r\n    const commonHandlers = {\r\n        handleIsOpenPaymentSchedule: () => setIsOpenPaymentSchedule(!isOpenPaymentSchedule),\r\n        handleContractPaymentSchedule: (data) => setContractPaymentSchedule(data || []),\r\n        handleLoadingButton: (bool) => setLoadingButton(bool),\r\n        handleReloadPage: (bool) => setReloadPage(bool),\r\n        handleCardData: (data) => setCardData(data || {}),\r\n        handleText: (e) => setInputs({ ...inputs, [e.target.name]: e.target.value }),\r\n        handleFloat: (e) => {\r\n            const value = String(e.target.value);\r\n            let copyValue = '';\r\n            for (const i of value) {\r\n                if (i in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) copyValue += i;\r\n                else if (i === ',' || i === '.') copyValue += '.';\r\n            }\r\n            if (copyValue[copyValue.length - 1] === '.' && +copyValue >= 0) {\r\n                setInputs({ ...inputs, [e.target.name]: copyValue || 0 });\r\n            } else {\r\n                setInputs({ ...inputs, [e.target.name]: +copyValue || 0 });\r\n            }\r\n        },\r\n        handleSelect: (e) => setSelects({ ...selects, [e.target.name]: e.target.value })\r\n    };\r\n\r\n    const commonErrors = {\r\n        checkInputNumber: (num) => ({\r\n            error: num <= 0,\r\n            helperText: num <= 0 ? '* Введите cумму больше нуля' : ''\r\n        }),\r\n        checkInputText: (text) => ({\r\n            error: text === '',\r\n            helperText: text === '' ? '* Введите значение' : ''\r\n        }),\r\n        checkSelect: (text, property) => ({\r\n            error: text === '',\r\n            helpertext: text === '' ? `* Обязательно выберите ${property}` : ''\r\n        })\r\n    };\r\n\r\n    const commonSetStates = {\r\n        setContractPaymentSchedule,\r\n        setInputs,\r\n        setCardData,\r\n        setSelects\r\n    };\r\n\r\n    return [commonStates, commonHandlers, commonErrors, commonSetStates];\r\n};\r\n\r\nexport { useBondIssueCommon };\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport request from '@/core/utils/request';\r\nimport { changeAgencyAgreementList } from '@/core/helpers/changeDataStructure';\r\nimport { getAgencyAgreements } from '@/core/services/agencyAgreementActions';\r\nimport { headCellsAgencyAgreements } from '@/core/helpers/headLines';\r\n\r\nconst useAgencyAgreementsList = (arr = []) => {\r\n    const dispatch = useDispatch();\r\n    const { agencyAgreementList } = useSelector((state) => ({\r\n        agencyAgreementList: state.lists.agencyAgreementList?.list || []\r\n    }));\r\n\r\n    const [selectedCheckBox, setSelectedCheckBox] = useState([]);\r\n    const [reloadPage, setReloadPage] = useState(false);\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n\r\n    useEffect(() => {\r\n        dispatch(getAgencyAgreements());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedCheckBox[0] > 0) {\r\n            const card = agencyAgreementList.find((item) => item.id === selectedCheckBox[0]) || {};\r\n            setSelectedCard(card);\r\n        }\r\n    }, [selectedCheckBox[0]]);\r\n\r\n    useEffect(() => {\r\n        if (reloadPage) {\r\n            dispatch(getAgencyAgreements());\r\n            setReloadPage(false);\r\n        }\r\n    }, [reloadPage]);\r\n\r\n    const commonHandlers = {\r\n        handleSelectTableRow: (event, id = null, data = null) => {\r\n            setSelectedCheckBox([id]);\r\n            if (id === null) {\r\n                setSelectedCard({});\r\n            }\r\n        },\r\n        handleReloadPage: (bool) => setReloadPage(bool)\r\n    };\r\n\r\n    return [\r\n        {\r\n            selectedCard,\r\n            reloadPage,\r\n            selectedCheckBox,\r\n            list: agencyAgreementList,\r\n            headCells: headCellsAgencyAgreements\r\n        },\r\n        { ...commonHandlers },\r\n        {}\r\n    ];\r\n};\r\n\r\nexport { useAgencyAgreementsList };\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Box } from '@mui/material';\r\nimport { useBondIssueList } from '@/core/hooks';\r\nimport { signBondIssueById } from '@/core/services/bondActions';\r\nimport { Table, ButtonsBoxRow, Spinner, NewDataTable } from '@/components';\r\nimport { ModalPaymentSchedule } from '@/containers';\r\nimport SubscribeIcon from '@mui/icons-material/RateReview';\r\nimport ScheduleIcon from '@mui/icons-material/EventNote';\r\nimport CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder';\r\n\r\nconst BondIssueList = () => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [commonStates, commonHandlers, commonErrors] = useBondIssueList([]);\r\n    const { cardData, loadingButton, reloadPage } = commonStates;\r\n\r\n    const handleNavigate = () => navigate('/contracts/bond-issue/null');\r\n\r\n    return (\r\n        <>\r\n            <Box gridColumn=\"span 12\" sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <ButtonsBoxRow>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        startIcon={commonStates.loadingButton ? <Spinner newsx={{ top: '5px' }} /> : <SubscribeIcon />}\r\n                        sx={{ background: '#0064ff', maxHeight: '35px' }}\r\n                        onClick={() => {\r\n                            commonHandlers.handleLoadingButton(true);\r\n                            dispatch(\r\n                                signBondIssueById({\r\n                                    contractId: cardData.id,\r\n                                    authorId: cardData.authorId || '',\r\n                                    actionType: 'BondEmissionSign',\r\n                                    date: cardData.contractDate,\r\n                                    reason: `Эмиссия бондов ${cardData.contractDate}`,\r\n                                    totalCost: cardData.nominalCost * cardData.quantity\r\n                                })\r\n                            )\r\n                                .then(() => {\r\n                                    commonHandlers.handleReloadPage(true);\r\n                                    commonHandlers.handleSelectTableRow(null, null);\r\n                                    commonHandlers.handleContractPaymentSchedule();\r\n                                    commonHandlers.handleCardData();\r\n                                })\r\n                                .finally(() => commonHandlers.handleLoadingButton(false));\r\n                        }}\r\n                        disabled={loadingButton || reloadPage || !(cardData.status === 0)}\r\n                    >\r\n                        Подписать\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<ScheduleIcon />}\r\n                        sx={{ background: '#0064ff' }}\r\n                        onClick={commonHandlers.handleIsOpenPaymentSchedule}\r\n                        disabled={!commonStates.selectedCheckBox[0]}\r\n                    >\r\n                        График выплат\r\n                    </Button>\r\n                </ButtonsBoxRow>\r\n\r\n                <Button variant=\"contained\" startIcon={<CreateNewFolderIcon />} sx={{ background: '#0064ff' }} onClick={handleNavigate}>\r\n                    Создать\r\n                </Button>\r\n            </Box>\r\n            <Box gridColumn=\"span 12\">\r\n                <ModalPaymentSchedule\r\n                    commonStates={commonStates}\r\n                    commonHandlers={commonHandlers}\r\n                    title=\"График купонных выплат по 1 облигации\"\r\n                />\r\n                <Table\r\n                    headCells={commonStates.headCells}\r\n                    rows={commonStates.list}\r\n                    selected={commonStates.selectedCheckBox}\r\n                    handleSelectTableRow={commonHandlers.handleSelectTableRow}\r\n                />\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BondIssueList;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getBondIssueList, getBondIssue } from '@/core/services/bondActions';\r\nimport { changeBondIssueList, changeDepositPaymentSchedule } from '@/core/helpers/changeDataStructure';\r\nimport { useBondIssueCommon } from '@/core/hooks/bondIssueCommon';\r\nimport { headCellsBondIssueList } from '@/core/helpers/headLines';\r\n\r\nconst useBondIssueList = (arr = []) => {\r\n    const dispatch = useDispatch();\r\n    const { bondIssueList, clientList } = useSelector((state) => ({\r\n        bondIssueList: state.lists.bondIssueList?.list || [],\r\n        clientList: state.lists.clientList\r\n    }));\r\n\r\n    const [commonStates, commonHandlers, commonErrors] = useBondIssueCommon();\r\n    const [selectedCheckBox, setSelectedCheckBox] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getBondIssueList());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (commonStates.reloadPage) {\r\n            dispatch(getBondIssueList());\r\n            commonHandlers.handleReloadPage(false);\r\n        }\r\n    }, [commonStates.reloadPage]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCheckBox[0]) {\r\n            dispatch(getBondIssue(selectedCheckBox[0])).then((data) => {\r\n                commonHandlers.handleContractPaymentSchedule(changeDepositPaymentSchedule(data.contractPaymentSchedule || []));\r\n                commonHandlers.handleCardData(data);\r\n            });\r\n        } else {\r\n            dispatch(getBondIssue());\r\n        }\r\n    }, [selectedCheckBox[0]]);\r\n\r\n    const handleSelectTableRow = (event, id = null, data = null) => setSelectedCheckBox([id]);\r\n\r\n    return [\r\n        {\r\n            ...commonStates,\r\n            selectedCheckBox,\r\n            list: changeBondIssueList(bondIssueList, clientList),\r\n            headCells: headCellsBondIssueList\r\n        },\r\n        { ...commonHandlers, handleSelectTableRow },\r\n        commonErrors\r\n    ];\r\n};\r\n\r\nexport { useBondIssueList };\r\n"],"names":["useBondIssueCommon","useState","isin","parValueOfBond","totalNumberOfBonds","couponPaymentAmountPerBond","inputs","setInputs","currencyId","emissionPeriod","couponRateId","selects","setSelects","contractPaymentSchedule","setContractPaymentSchedule","isOpenPaymentSchedule","setIsOpenPaymentSchedule","loadingButton","setLoadingButton","reloadPage","setReloadPage","cardData","setCardData","commonStates","commonHandlers","handleIsOpenPaymentSchedule","handleContractPaymentSchedule","data","handleLoadingButton","bool","handleReloadPage","handleCardData","handleText","e","target","name","value","handleFloat","copyValue","String","i","length","handleSelect","commonErrors","checkInputNumber","num","error","helperText","checkInputText","text","checkSelect","property","helpertext","commonSetStates","navigate","useNavigate","dispatch","useDispatch","useSelector","state","bondIssueList","lists","list","clientList","selectedCheckBox","setSelectedCheckBox","useEffect","getBondIssueList","getBondIssue","then","changeDepositPaymentSchedule","handleSelectTableRow","event","changeBondIssueList","headCells","headCellsBondIssueList","useBondIssueList","Box","gridColumn","sx","display","justifyContent","alignItems","Button","variant","startIcon","newsx","top","background","maxHeight","onClick","signBondIssueById","contractId","id","authorId","actionType","date","contractDate","reason","totalCost","nominalCost","quantity","disabled","status","CreateNewFolder","title","rows","selected"],"sourceRoot":""}