{"version":3,"file":"567.ec04c929.js","mappings":"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","sources":["webpack://new_react_lending/./src/core/store/lists/actions.js","webpack://new_react_lending/./src/core/services/clientList.js","webpack://new_react_lending/./src/core/hooks/clientList/index.js","webpack://new_react_lending/./src/core/hooks/createClient/index.js","webpack://new_react_lending/./src/core/services/loanAgreementList.js","webpack://new_react_lending/./src/core/hooks/loanAgreementList/index.js"],"sourcesContent":["import * as constants from './constants';\r\n\r\nconst listPending = () => ({ type: constants.LIST_PENDING });\r\nconst getClientListSuccess = (list = {}) => ({ type: constants.GET_CLIENT_LIST_SUCCESS, list });\r\nconst getLoanAgreementSuccess = (list = {}) => ({ type: constants.GET_LOAN_AGREEMENT_LIST_SUCCESS, list });\r\nconst listError = (error = '') => ({ type: constants.LIST_ERROR, error });\r\n\r\nexport { listPending, getClientListSuccess, listError, getLoanAgreementSuccess };\r\n","import request from '@/core/utils/request';\r\nimport { listPending, getClientListSuccess, listError } from '@/core/store/lists/actions';\r\n\r\nconst getClientList =\r\n    (params = {}) =>\r\n    (dispatch) => {\r\n        dispatch(listPending());\r\n        request\r\n            .post(`/api/Client/list`, params)\r\n            .then((res) => res.json())\r\n            .then(\r\n                (data) => dispatch(getClientListSuccess(data)),\r\n                (error) => dispatch(listError('Ошибка при загрузке клиента'))\r\n            );\r\n    };\r\n\r\nexport { getClientList };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getClientList } from '@/core/services/clientList';\r\n\r\nconst useSelectedTableRow = (arr = []) => {\r\n    const dispatch = useDispatch();\r\n    const { list, error, pending } = useSelector((state) => ({\r\n        list: state.lists.clientList.list || [],\r\n        error: state.lists.error,\r\n        pending: state.lists.pending\r\n    }));\r\n\r\n    const [selected, setSelected] = useState(arr);\r\n\r\n    useEffect(() => {\r\n        dispatch(getClientList());\r\n    }, []);\r\n\r\n    const handleSelectAllTableRows = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = list.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleSelectTableRow = (event, id) => {\r\n        const selectedId = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        switch (selectedId) {\r\n            case -1:\r\n                newSelected = [...selected, id];\r\n                break;\r\n            case 0:\r\n                newSelected = [...selected.slice(1)];\r\n                break;\r\n            case selected.length - 1:\r\n                newSelected = [...selected.slice(0, -1)];\r\n                break;\r\n            default:\r\n                newSelected = [...selected.slice(0, selectedId), ...selected.slice(selectedId + 1)];\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    return [selected, list, handleSelectAllTableRows, handleSelectTableRow];\r\n};\r\n\r\nexport { useSelectedTableRow };\r\n","import React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst usePerformInfoForm = () => {\r\n    const listLegalForms = useSelector((state) => state.dictionaries.clientLegalForms || []);\r\n    const [legalForm, setLegalform] = useState(listLegalForms[0]?.code || null);\r\n    const [iin, setIin] = useState('');\r\n    const [gender, setGender] = useState('man');\r\n    const [surname, setSurname] = useState('');\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [adress, setAdress] = useState('');\r\n\r\n    const infoStates = {\r\n        legalForm,\r\n        listLegalForms,\r\n        iin,\r\n        gender,\r\n        surname,\r\n        firstname,\r\n        lastname,\r\n        adress\r\n    };\r\n\r\n    const infoHandlers = {\r\n        handleIin: (e) => setIin(e.target.value),\r\n        handleAdress: (e) => setAdress(e.target.value),\r\n        handleGender: (e) => setGender(e.target.value),\r\n        handleSurname: (e) => setSurname(e.target.value),\r\n        handleLastname: (e) => setLastname(e.target.value),\r\n        handleLegalform: (e) => setLegalform(e.target.value),\r\n        handleFirstname: (e) => setFirstname(e.target.value)\r\n    };\r\n\r\n    const infoErrors = {\r\n        checkIin: {\r\n            error: iin.length === 0,\r\n            helperText: iin.length === 0 ? 'Введите корректные данные' : ''\r\n        },\r\n        checkRuString: () => ({\r\n            error: iin.length === 0,\r\n            helperText: iin.length === 0 ? 'Введите корректные данные' : ''\r\n        })\r\n    };\r\n\r\n    return [infoStates, infoHandlers, infoErrors];\r\n};\r\n\r\nconst usePerformContactsForm = () => {\r\n    const translationOfContactTypes = [\r\n        { id: 'mobile-phone', name: 'mobile', translate: 'Мобильный телефон' },\r\n        { id: 'home-phone', name: 'home', translate: 'Домашний телефон' },\r\n        { id: 'work-phone', name: 'work', translate: 'Рабочий телефон' }\r\n    ];\r\n\r\n    const defaultContact = { id: nanoid(8), checked: false, typeContact: 'mobile', phoneNumber: '' };\r\n    const initialBaseContact = [{ ...defaultContact, id: nanoid(8) }];\r\n\r\n    const [contactList, setContactList] = useState(initialBaseContact);\r\n    const [selectedRadioButtonIndex, setSelectedRadioButtonIndex] = useState('0');\r\n\r\n    const contactState = {\r\n        contactList,\r\n        translationOfContactTypes\r\n    };\r\n\r\n    const contactHandlers = {\r\n        handleAddContact: () => setContactList([...contactList, defaultContact]),\r\n        handleLegalform: (index, e) => changeListProperty(index, e.target.value, 'typeContact'),\r\n        handleCheckbox: (index, e) => changeListProperty(index, e.target.checked, 'checked'),\r\n        handlePhoneNumber: (index, e) => changeListProperty(index, e.target.value, 'phoneNumber'),\r\n        handleBasicContact: (index, e) => changeListProperty(index, e.target.checked, 'basicContact'),\r\n        handleRemoveRows: () => {\r\n            const newContactList = contactList.filter((item) => !item.checked);\r\n            setContactList(newContactList);\r\n        },\r\n        controlBasicContact: (index) => ({\r\n            checked: selectedRadioButtonIndex === String(index),\r\n            onChange: (e) => setSelectedRadioButtonIndex(e.target.value),\r\n            value: index,\r\n            name: 'contact-radio-buttons',\r\n            inputProps: { 'aria-label': index }\r\n        })\r\n    };\r\n\r\n    const contactErrors = {\r\n        checkIin: {\r\n            //     error: iin.length === 0,\r\n            //     helperText: iin.length === 0 ? 'Введите корректные данные' : ''\r\n        }\r\n    };\r\n\r\n    function changeListProperty(index, value, property) {\r\n        const newContactList = contactList.slice();\r\n        newContactList[index][property] = value;\r\n        setContactList(newContactList);\r\n    }\r\n\r\n    return [contactState, contactHandlers, contactErrors];\r\n};\r\n\r\nconst usePerformRequisitesForm = () => {\r\n    const translationTypeOfProps = [\r\n        { id: 'iban-phone', name: 'iban', translate: 'Расчетный счет (IBAN)' },\r\n        { id: 'cashe-phone', name: 'cashe', translate: 'Наличными' }\r\n    ];\r\n\r\n    const translationBank = [{ id: 'kaspi', name: 'kaspi', translate: 'AO \"Kaspi Bank\" (CASPKZKA)' }];\r\n\r\n    const defaultRequisite = { id: nanoid(8), checked: false, typeOfProps: 'iban', propsValue: '', bank: 'kaspi', note: '' };\r\n    const initialBaseRequisite = [{ ...defaultRequisite, id: nanoid(8) }];\r\n\r\n    const [requisiteList, setRequisiteList] = useState(initialBaseRequisite);\r\n    const [selectedRadioButtonIndex, setSelectedRadioButtonIndex] = useState('0');\r\n\r\n    const requisiteState = {\r\n        requisiteList,\r\n        translationTypeOfProps,\r\n        translationBank\r\n    };\r\n\r\n    const requisiteHandlers = {\r\n        handleAddRequisite: () => setRequisiteList([...requisiteList, defaultRequisite]),\r\n        handleTypeOfProps: (index, e) => changeListProperty(index, e.target.value, 'typeOfProps'),\r\n        handleBank: (index, e) => changeListProperty(index, e.target.value, 'bank'),\r\n        handleCheckbox: (index, e) => changeListProperty(index, e.target.checked, 'checked'),\r\n        handlePropsValue: (index, e) => changeListProperty(index, e.target.value, 'propsValue'),\r\n        handleNote: (index, e) => changeListProperty(index, e.target.value, 'note'),\r\n        handleBasicRequisite: (index, e) => changeListProperty(index, e.target.checked, 'basicRequisite'),\r\n        handleRemoveRows: () => {\r\n            const newRequisiteList = requisiteList.filter((item) => !item.checked);\r\n            setRequisiteList(newRequisiteList);\r\n        },\r\n        controlBasicRequisite: (index) => ({\r\n            checked: selectedRadioButtonIndex === String(index),\r\n            onChange: (e) => setSelectedRadioButtonIndex(e.target.value),\r\n            value: index,\r\n            name: 'requisite-radio-buttons',\r\n            inputProps: { 'aria-label': index }\r\n        })\r\n    };\r\n\r\n    const requisiteErrors = {\r\n        checkIin: {\r\n            //     error: iin.length === 0,\r\n            //     helperText: iin.length === 0 ? 'Введите корректные данные' : ''\r\n        }\r\n    };\r\n\r\n    function changeListProperty(index, value, property) {\r\n        const newRequisiteList = requisiteList.slice();\r\n        newRequisiteList[index][property] = value;\r\n        setRequisiteList(newRequisiteList);\r\n    }\r\n\r\n    return [requisiteState, requisiteHandlers, requisiteErrors];\r\n};\r\n\r\nexport { usePerformInfoForm, usePerformContactsForm, usePerformRequisitesForm };\r\n","import request from '@/core/utils/request';\r\nimport { listPending, getLoanAgreementSuccess, listError } from '@/core/store/lists/actions';\r\n\r\nconst getLoanAgreementList =\r\n    (params = {}) =>\r\n    (dispatch) => {\r\n        dispatch(listPending());\r\n        request\r\n            .post(`/api/Deposit/list`, params)\r\n            .then((res) => res.json())\r\n            .then(\r\n                (data) => dispatch(getLoanAgreementSuccess(data)),\r\n                (error) => dispatch(listError('Ошибка при загрузке договора займа'))\r\n            );\r\n    };\r\n\r\nexport { getLoanAgreementList };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getLoanAgreementList } from '@/core/services/loanAgreementList';\r\n\r\nconst useLoanAgreementList = (arr = []) => {\r\n    const dispatch = useDispatch();\r\n    const { list, error, pending } = useSelector((state) => ({\r\n        list: state.lists.loanAgreementList.list || [],\r\n        error: state.lists.error,\r\n        pending: state.lists.pending\r\n    }));\r\n\r\n    const [selected, setSelected] = useState(arr);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLoanAgreementList());\r\n    }, []);\r\n\r\n    const handleSelectAllTableRows = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = list.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleSelectTableRow = (event, id) => {\r\n        const selectedId = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        switch (selectedId) {\r\n            case -1:\r\n                newSelected = [...selected, id];\r\n                break;\r\n            case 0:\r\n                newSelected = [...selected.slice(1)];\r\n                break;\r\n            case selected.length - 1:\r\n                newSelected = [...selected.slice(0, -1)];\r\n                break;\r\n            default:\r\n                newSelected = [...selected.slice(0, selectedId), ...selected.slice(selectedId + 1)];\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    return [selected, list, handleSelectAllTableRows, handleSelectTableRow];\r\n};\r\n\r\nexport { useLoanAgreementList };\r\n"],"names":["listPending","type","constants","getClientListSuccess","list","getLoanAgreementSuccess","listError","error","getClientList","params","dispatch","request","then","res","json","data","useSelectedTableRow","arr","useDispatch","useSelector","state","lists","clientList","pending","useState","selected","setSelected","useEffect","handleSelectAllTableRows","event","target","checked","newSelecteds","map","n","id","handleSelectTableRow","selectedId","indexOf","newSelected","slice","length","usePerformInfoForm","listLegalForms","dictionaries","clientLegalForms","code","legalForm","setLegalform","iin","setIin","gender","setGender","surname","setSurname","firstname","setFirstname","lastname","setLastname","adress","setAdress","handleIin","e","value","handleAdress","handleGender","handleSurname","handleLastname","handleLegalform","handleFirstname","checkIin","helperText","checkRuString","usePerformContactsForm","defaultContact","nanoid","typeContact","phoneNumber","initialBaseContact","contactList","setContactList","selectedRadioButtonIndex","setSelectedRadioButtonIndex","changeListProperty","index","property","newContactList","translationOfContactTypes","name","translate","handleAddContact","handleCheckbox","handlePhoneNumber","handleBasicContact","handleRemoveRows","filter","item","controlBasicContact","String","onChange","inputProps","usePerformRequisitesForm","defaultRequisite","typeOfProps","propsValue","bank","note","initialBaseRequisite","requisiteList","setRequisiteList","newRequisiteList","translationTypeOfProps","translationBank","handleAddRequisite","handleTypeOfProps","handleBank","handlePropsValue","handleNote","handleBasicRequisite","controlBasicRequisite","getLoanAgreementList","useLoanAgreementList","loanAgreementList"],"sourceRoot":""}