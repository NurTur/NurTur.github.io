{"version":3,"file":"npm.rifm.62dc1c20.js","mappings":"oJAEA,MAAMA,EAAUC,IACd,MAAO,CAAEC,IAAW,IAAAC,aAAWC,GAAKA,EAAI,GAAG,GACrCC,GAAW,IAAAC,QAAO,OAClB,QACJC,EAAO,OACPC,GACEP,EACEQ,EAAYF,EAAUA,EAAQN,EAAMS,OAAOT,EAAMU,QAAUV,EAAMS,OAAOT,EAAMU,OAE9EC,GAA0B,IAAAN,SAAO,GAoKvC,OA3HE,IAAAO,kBAAgB,KACd,GAAwB,MAApBR,EAASS,QAAiB,OAC9B,IAAKC,EAAYC,EAAOC,EAAyBC,EACjDC,GAAiBd,EAASS,QAC1BT,EAASS,QAAU,KAGnB,MAAMM,EAAgBF,GAAwBC,EAExCE,EAD2BN,EAAWO,MAAMN,EAAMO,gBACMC,OAAOvB,EAAMwB,QAAU,OAC/EC,GAA2D,IAAlCL,EAAsCA,EAA+B,EAE9FM,EAAQC,IAAQA,EAAIC,MAAM5B,EAAMwB,QAAU,QAAU,IAAIK,KAAK,IAE7DC,EAA4BJ,EAAMZ,EAAWiB,OAAO,EAAGhB,EAAMO,iBAS7DU,EAAoBC,IACxB,IAAIC,EAAQ,EACRC,EAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,IAAMN,EAA0BO,SAAUD,EAAG,CAC3D,IAAIE,EAASL,EAAIM,QAAQT,EAA0BM,GAAIF,GAAS,EAC5DM,EAAcd,EAAMO,GAAKM,QAAQT,EAA0BM,GAAID,GAAY,EAM3EK,EAAcL,EAAW,IAC3BG,EAASJ,EACTM,EAAcL,GAGhBA,EAAWM,KAAKC,IAAIF,EAAaL,GACjCD,EAAQO,KAAKC,IAAIR,EAAOI,GAG1B,OAAOJ,GAKT,IAAmB,IAAflC,EAAM2C,MAAiB3B,IAA4BE,EAAe,CACpE,IAAIgB,EAAQF,EAAkBlB,GAC9B,MAAMX,EAAIuB,EAAMZ,EAAWiB,OAAOG,IAAQ,GAC1CA,EAAQpB,EAAWyB,QAAQpC,EAAG+B,GAC9BpB,EAAa,GAAGA,EAAWiB,OAAO,EAAGG,KAASpB,EAAWiB,OAAOG,EAAQ,KAG1E,IAAIU,EAAiB5C,EAAMS,OAAOK,GAEpB,MAAVP,GACJQ,EAAMO,iBAAmBR,EAAWuB,QAAWnB,IACzCF,EACF4B,EAAiBrC,EAAOqC,GAKgB,KAApClB,EAAMkB,EAAevB,OAAO,MAC9BuB,EAAiBA,EAAevB,MAAM,GAAI,KAKhD,MAAMwB,EAAgBvC,EAAUA,EAAQsC,GAAkBA,EAS1D,OAPIpC,IAAcqC,EAEhB5C,IAEAD,EAAM8C,SAASD,GAGV,KACL,IAAIX,EAAQF,EAAkBY,GAK9B,GAAkB,MAAd5C,EAAM2C,OAAiB3B,GAA2BC,IAAyBE,GAC7E,KAAOyB,EAAeV,IAA2C,KAAjCR,EAAMkB,EAAeV,KACnDA,GAAS,EAIbnB,EAAMO,eAAiBP,EAAMgC,aAAeb,GAASf,EAAgB,EAAIM,EAAyB,QAKxG,IAAAuB,YAAU,KAMR,MAAMC,EAAgBC,IACH,WAAbA,EAAIC,OACNxC,EAAwBE,SAAU,IAIhCuC,EAAcF,IACD,WAAbA,EAAIC,OACNxC,EAAwBE,SAAU,IAMtC,OAFAwC,SAASC,iBAAiB,UAAWL,GACrCI,SAASC,iBAAiB,QAASF,GAC5B,KACLC,SAASE,oBAAoB,UAAWN,GACxCI,SAASE,oBAAoB,QAASH,MAEvC,IACI,CACL1C,MAA2B,MAApBN,EAASS,QAAkBT,EAASS,QAAQ,GAAKL,EACxDsC,SApKeI,IAaf,MAAMpC,EAAaoC,EAAIM,OAAO9C,MAC9BN,EAASS,QAAU,CAACC,EACpBoC,EAAIM,OACJ1C,EAAWuB,OAAS7B,EAAU6B,OAC9B1B,EAAwBE,QACxBL,IAAcR,EAAMS,OAAOK,IAe3Bb","sources":["webpack://new_react_lending/./node_modules/rifm/dist/rifm.esm.js"],"sourcesContent":["import { useReducer, useRef, useLayoutEffect, useEffect } from 'react';\n\nconst useRifm = props => {\n  const [, refresh] = useReducer(c => c + 1, 0);\n  const valueRef = useRef(null);\n  const {\n    replace,\n    append\n  } = props;\n  const userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support\n\n  const isDeleleteButtonDownRef = useRef(false);\n\n  const onChange = evt => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (evt.target.type === 'number') {\n        console.error('Rifm does not support input type=number, use type=tel instead.');\n        return;\n      }\n\n      if (evt.target.type === 'date') {\n        console.error('Rifm does not support input type=date.');\n        return;\n      }\n    }\n\n    const eventValue = evt.target.value;\n    valueRef.current = [eventValue, // eventValue\n    evt.target, // input\n    eventValue.length > userValue.length, // isSizeIncreaseOperation\n    isDeleleteButtonDownRef.current, // isDeleleteButtonDown\n    userValue === props.format(eventValue) // isNoOperation\n    ];\n\n    if (process.env.NODE_ENV !== 'production') {\n      const formattedEventValue = props.format(eventValue);\n\n      if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {\n        console.warn('Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead');\n      }\n    } // The main trick is to update underlying input with non formatted value (= eventValue)\n    // that allows us to calculate right cursor position after formatting (see getCursorPosition)\n    // then we format new value and call props.onChange with masked/formatted value\n    // and finally we are able to set cursor position into right place\n\n\n    refresh();\n  }; // React prints warn on server in non production mode about useLayoutEffect usage\n  // in both cases it's noop\n\n\n  if (process.env.NODE_ENV === 'production' || typeof window !== 'undefined') {\n    useLayoutEffect(() => {\n      if (valueRef.current == null) return;\n      let [eventValue, input, isSizeIncreaseOperation, isDeleleteButtonDown, // No operation means that value itself hasn't been changed, BTW cursor, selection etc can be changed\n      isNoOperation] = valueRef.current;\n      valueRef.current = null; // this usually occurs on deleting special symbols like ' here 123'123.00\n      // in case of isDeleleteButtonDown cursor should move differently vs backspace\n\n      const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;\n      const valueAfterSelectionStart = eventValue.slice(input.selectionStart);\n      const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\\d/g);\n      const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0; // Create string from only accepted symbols\n\n      const clean = str => (str.match(props.accept || /\\d/g) || []).join('');\n\n      const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart)); // trying to find cursor position in formatted value having knowledge about valueBeforeSelectionStart\n      // This works because we assume that format doesn't change the order of accepted symbols.\n      // Imagine we have formatter which adds ' symbol between numbers, and by default we refuse all non numeric symbols\n      // for example we had input = 1'2|'4 (| means cursor position) then user entered '3' symbol\n      // inputValue = 1'23'|4 so valueBeforeSelectionStart = 123 and formatted value = 1'2'3'4\n      // calling getCursorPosition(\"1'2'3'4\") will give us position after 3, 1'2'3|'4\n      // so for formatting just this function to determine cursor position after formatting is enough\n      // with masking we need to do some additional checks see `mask` below\n\n      const getCursorPosition = val => {\n        let start = 0;\n        let cleanPos = 0;\n\n        for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {\n          let newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;\n          let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1; // this skips position change if accepted symbols order was broken\n          // For example fixes edge case with fixed point numbers:\n          // You have '0|.00', then press 1, it becomes 01|.00 and after format 1.00, this breaks our assumption\n          // that order of accepted symbols is not changed after format,\n          // so here we don't update start position if other accepted symbols was inbetween current and new position\n\n          if (newCleanPos - cleanPos > 1) {\n            newPos = start;\n            newCleanPos = cleanPos;\n          }\n\n          cleanPos = Math.max(newCleanPos, cleanPos);\n          start = Math.max(start, newPos);\n        }\n\n        return start;\n      }; // Masking part, for masks if size of mask is above some value\n      // we need to replace symbols instead of do nothing as like in format\n\n\n      if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {\n        let start = getCursorPosition(eventValue);\n        const c = clean(eventValue.substr(start))[0];\n        start = eventValue.indexOf(c, start);\n        eventValue = `${eventValue.substr(0, start)}${eventValue.substr(start + 1)}`;\n      }\n\n      let formattedValue = props.format(eventValue);\n\n      if (append != null && // cursor at the end\n      input.selectionStart === eventValue.length && !isNoOperation) {\n        if (isSizeIncreaseOperation) {\n          formattedValue = append(formattedValue);\n        } else {\n          // If after delete last char is special character and we use append\n          // delete it too\n          // was: \"12-3|\" backspace pressed, then should be \"12|\"\n          if (clean(formattedValue.slice(-1)) === '') {\n            formattedValue = formattedValue.slice(0, -1);\n          }\n        }\n      }\n\n      const replacedValue = replace ? replace(formattedValue) : formattedValue;\n\n      if (userValue === replacedValue) {\n        // if nothing changed for formatted value, just refresh so userValue will be used at render\n        refresh();\n      } else {\n        props.onChange(replacedValue);\n      }\n\n      return () => {\n        let start = getCursorPosition(formattedValue); // Visually improves working with masked values,\n        // like cursor jumping over refused symbols\n        // as an example date mask: was \"5|1-24-3\" then user pressed \"6\"\n        // it becomes \"56-|12-43\" with this code, and \"56|-12-43\" without\n\n        if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {\n          while (formattedValue[start] && clean(formattedValue[start]) === '') {\n            start += 1;\n          }\n        }\n\n        input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);\n      };\n    });\n  }\n\n  useEffect(() => {\n    // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported\n    // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)\n    // there is no way I found to distinguish in onChange\n    // backspace or delete was called in some situations\n    // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239\n    const handleKeyDown = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = true;\n      }\n    };\n\n    const handleKeyUp = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = false;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  return {\n    value: valueRef.current != null ? valueRef.current[0] : userValue,\n    onChange\n  };\n};\nconst Rifm = props => {\n  const renderProps = useRifm(props);\n  return props.children(renderProps);\n};\n\nexport { Rifm, useRifm };\n"],"names":["useRifm","props","refresh","useReducer","c","valueRef","useRef","replace","append","userValue","format","value","isDeleleteButtonDownRef","useLayoutEffect","current","eventValue","input","isSizeIncreaseOperation","isDeleleteButtonDown","isNoOperation","deleteWasNoOp","acceptedCharIndexAfterDelete","slice","selectionStart","search","accept","charsToSkipAfterDelete","clean","str","match","join","valueBeforeSelectionStart","substr","getCursorPosition","val","start","cleanPos","i","length","newPos","indexOf","newCleanPos","Math","max","mask","formattedValue","replacedValue","onChange","selectionEnd","useEffect","handleKeyDown","evt","code","handleKeyUp","document","addEventListener","removeEventListener","target"],"sourceRoot":""}